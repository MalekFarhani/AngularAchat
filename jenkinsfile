pipeline{
    agent any

stages{
   stage('Clean The Workspace')
        {
            steps{
                cleanWs()
                 }
        } 

    stage('Pulling the code From Github')
        {
            steps{
                git branch: 'prod', 
                url: 'https://github.com/MalekFarhani/AngularAchat'
                 }   
        }
    
    stage('AKS Provisioning with Terraform') {
            steps {
                    sh "chmod +x setup-aks.sh"
                    sh "./setup-aks.sh" 
                    }}
    
    stage('Deploying mysql and The Backend') { 
            steps {                
                    sh "kubectl apply -f mysql-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f mysql-svc.yml"  
                    sh "kubectl get pods"
                    sh "kubectl get services"
                    sh "kubectl apply -f back-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f back-svc.yml" 
                    sh "kubectl get pods"
                    sh "kubectl get services" 
                   }} 
   
    stage('Get The Backend Service URL') {
    steps {
        script {
            def serviceName = 'spring-boot-service' // Name of your Spring Boot service
            def externalIP = ''
            def maxRetries = 10
            def retryCount = 0

            while (externalIP.isEmpty() && retryCount < maxRetries) {
                externalIP = sh(script: "kubectl get svc ${serviceName} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                if (externalIP.isEmpty()) {
                    echo "External IP not found. Retrying in 30 seconds..."
                    sleep time: 30, unit: 'SECONDS'
                    retryCount++
                }
            }

           
        }
    }
}
    stage('Update Frontend files'){
        steps{ 
                if (externalIP) {
                echo "External IP for Spring Boot service: ${externalIP}"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Facture.service.ts"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Operateur.service.ts"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Product.service.ts"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Reglement.service.ts"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Secteur-activite.service.ts"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Stock.service.ts"
                sh 'cat src/app/shared/Service/Stock.service.ts'
            } 
            else {
                error "External IP for Spring Boot service not found after ${maxRetries} retries."
            } 
             }    
        }

    stage('Building the Updated Frontend App'){
        steps{ 
                sh 'docker build . -t malekkkk/achatang:2.0'  
             }    
        }
    
    stage('ACR login'){
        steps {
                withCredentials([string(credentialsId: 'dockerhu', variable: 'dockerhubpwd')]) {      
                        sh "echo \$dockerhubpwd | docker login -u malekkkk --password-stdin"}
              }
        }
   
    stage ('Pushing the Image To ACR'){
        steps{
            sh 'docker push malekkkk/achatang:2.0'  
             }
        }

   stage('Deploying Frontend To AKS') {
    steps {
        script {
            sh "kubectl apply -f front-dep.yml"
            sh "kubectl apply -f front-svc.yml"

            def serviceName = 'angular-service' 
            def maxRetries = 10
            def retryCount = 0
            def externalIP = ''

            while (externalIP.isEmpty() && retryCount < maxRetries) {
                
                externalIP = sh(script: "kubectl get svc ${serviceName} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                if (externalIP.isEmpty()) {
                    echo "External IP for Angular service not found. Retrying in 30 seconds..."
                    sleep time: 30, unit: 'SECONDS'
                    retryCount++
                }
            }

           
        }
    }
}

        stage ('The Application URL'){
            steps {
                 if (externalIP) {
                echo "External IP for Angular service: http://${externalIP}:80"
                
                     } 
            else {
                error "External IP for Angular service not found after ${maxRetries} retries."
            }
            }
        }
}}   