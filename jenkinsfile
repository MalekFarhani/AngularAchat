pipeline{
    agent any

environment {
        SERVICE_NAME = 'spring-boot-service' // The name of your NodePort service
        SERVICE_PORT = 8089 // The port on which your service is exposed
        ANGULAR_SERVICE_FILE = 'src/app/shared/Service/Reglement.service.ts' // The path to your Angular service file
    }
stages{
   stage('clean workspace')
        {
            steps{
                cleanWs()
                 }
        } 

    stage('pulling the code')
        {
            steps{
                git branch: 'prod', 
                url: 'https://github.com/MalekFarhani/AngularAchat'
                 }   
        }
    
    stage('Terraform Init and Apply') {
            steps {
                    sh "chmod +x setup-aks.sh"
                    sh "./setup-aks.sh"
                    sh "az account set --subscription 2600ef59-0249-4a9f-af1c-68655b8143bf"
                    sh "az aks get-credentials --resource-group dudaRessourceGroup --name dudaAKSCluster"
                    sh "kubectl apply -f mysql-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f mysql-svc.yml"  
                    sh "kubectl get pods"
                    sh "kubectl get services"
                    sh "kubectl apply -f back-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f back-svc.yml" 
                    sh "kubectl get pods"
                    sh "kubectl get services" 
                    }}
    stage('Get Spring Boot Service External IP') {
    steps {
        script {
            def serviceName = 'spring-boot-service' // Name of your Spring Boot service
            def externalIP = ''
            def maxRetries = 10
            def retryCount = 0

            while (externalIP.isEmpty() && retryCount < maxRetries) {
                externalIP = sh(script: "kubectl get svc ${serviceName} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                if (externalIP.isEmpty()) {
                    echo "External IP not found. Retrying in 30 seconds..."
                    sleep time: 30, unit: 'SECONDS'
                    retryCount++
                }
            }

            if (externalIP) {
                echo "External IP for Spring Boot service: ${externalIP}"
                sh "sed -i 's|localhost|${externalIP}|g' src/app/shared/Service/Reglement.service.ts"
            } else {
                error "External IP for Spring Boot service not found after ${maxRetries} retries."
            }
        }
    }
}

    stage('docker'){
        steps{ 
                sh 'docker build . -t malekkkk/achatang:2.0'  
             }    
        }
    
    stage('docker login'){
        steps {
                withCredentials([string(credentialsId: 'dockerhu', variable: 'dockerhubpwd')]) {      
                        sh "echo \$dockerhubpwd | docker login -u malekkkk --password-stdin"}
              }
        }
   
    stage ('docker push'){
        steps{
            sh 'docker push malekkkk/achatang:2.0'  
             }
        }

    stage('angular'){
        steps{ 
                    sh "kubectl apply -f front-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f front-svc.yml" 
             }    
        }

}}   