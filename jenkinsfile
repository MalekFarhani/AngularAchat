pipeline{
    agent any
environment {
        SERVICE_NAME = 'spring-boot-service' // The name of your NodePort service
        SERVICE_PORT = 8089 // The port on which your service is exposed
        ANGULAR_SERVICE_FILE = 'src/app/shared/service/Reglement.service.ts' // The path to your Angular service file
    }
stages{
   stage('clean workspace')
        {
            steps{
                cleanWs()
                 }
        } 

    stage('pulling the code')
        {
            steps{
                git branch: 'main', 
                url: 'https://github.com/MalekFarhani/AngularAchat'
                 }   
        }
    
    stage('Terraform Init and Apply') {
            steps {
                    sh "chmod +x setup-aks.sh"
                    sh "./setup-aks.sh"
                    sh "az account set --subscription 2600ef59-0249-4a9f-af1c-68655b8143bf"
                    sh "az aks get-credentials --resource-group malekRessourceGroup --name malekAKSCluster"
                    sh "kubectl apply -f mysql-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f mysql-svc.yml"  
                    sh "kubectl get pods"
                    sh "kubectl get services"
                    sh "kubectl apply -f back-dep.yml"
                    sleep(time: 20, unit: 'SECONDS')
                    sh "kubectl apply -f back-svc.yml" 
                    sh "kubectl get pods"
                    sh "kubectl get services" 
                    }}
stage('Get Spring Boot Service IP') {
            steps {
                script {
                    def nodePortServiceInfo = sh(script: "kubectl get svc ${SERVICE_NAME} -o json", returnStdout: true).trim()
                    def serviceIPs = readJSON text: nodePortServiceInfo
                    def nodePort = serviceIPs.spec.ports.find { it.port == SERVICE_PORT }?.nodePort

                    if (nodePort) {
                        echo "Spring Boot service is accessible via NodePort: ${nodePort}"
                    } else {
                        error "NodePort for Spring Boot service not found"
                    }
                }
            }
        }

        stage('Replace URL in Angular Service') {
            steps {
                script {
                    def nodePort = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}'", returnStdout: true).trim()
                    def oldURL = "http://localhost:${SERVICE_PORT}" // Old URL to replace
                    def newURL = "http://${nodePort}:${SERVICE_PORT}" // New URL with the retrieved IP

                    // Replace the URL in the Angular service file
                    def replaceCommand = "sed -i 's|${oldURL}|${newURL}|g' ${ANGULAR_SERVICE_FILE}"
                    sh returnStatus: true, script: replaceCommand

                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "URL replacement was successful."
                    } else {
                        error "URL replacement failed."
                    }
                }
            }}
  
    stage("install")
        {
            steps{
            sh "npm install"
                 }
        }
    stage("build"){
            steps {
            sh "CI=false npm run build"
            sh "ls -l"
            sh "zip -j -r build.zip dist/crudtuto-Front/*"
                  }
        }
 
    stage('Publish to Nexus') {
            steps {
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'nginx-config',
                        classifier: '',
                        file: 'nginx.conf',
                        type: ''
                    ],
                    
                    [  
                        artifactId: 'front-build',
                        classifier: '',
                        file: 'build.zip',
                        type: 'achat.zip'
                        
                    ]
                ],
                credentialsId: 'nexus-cred',
                groupId: 'achatconfig',
                version: "1.0.0",
                nexusUrl: '192.168.222.133:8081',
                nexusVersion: 'nexus3',
                protocol: 'http',
                repository: 'achatfront'
                 }
        }
   
    stage('docker'){
        steps{ 
                sh 'docker build . -t malekkkk/achatang:3.0'  
             }    
        }
    stage ('cleaning cache'){
        steps{
                sh 'docker builder prune'
        }
    }

    stage('docker login'){
        steps {
                withCredentials([string(credentialsId: 'dockerhu', variable: 'dockerhubpwd')]) {      
                        sh "echo \$dockerhubpwd | docker login -u malekkkk --password-stdin"}
              }
        }
   
    stage ('docker push'){
        steps{
            sh 'docker push malekkkk/achatang:3.0'  
             }
        }
    stage ('deploy the angular app') {
        steps {
            sh 'kubetcl apply -f front-dep.yml'
            sleep(time: 120, unit: 'SECONDS')
            sh 'kubectl apply -f front-svc.yml'
            sh 'kubectl get pods'
            sh 'kubectl get services'
        }}
}}
